// <auto-generated />
using System;
using Backend_Resourcely.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Backend_Resourcely.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250923162436_InitialCreateMySQL")]
    partial class InitialCreateMySQL
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Backend_Resourcely.Models.Block", b =>
                {
                    b.Property<int>("BlockID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("BlockID"));

                    b.Property<string>("BlockName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<int>("FloorID")
                        .HasColumnType("int");

                    b.HasKey("BlockID");

                    b.HasIndex("FloorID", "BlockName")
                        .IsUnique();

                    b.ToTable("Blocks");

                    b.HasData(
                        new
                        {
                            BlockID = 1,
                            BlockName = "Block A",
                            CreatedAt = new DateTime(2025, 9, 21, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Administration block",
                            FloorID = 1
                        },
                        new
                        {
                            BlockID = 2,
                            BlockName = "Block A",
                            CreatedAt = new DateTime(2025, 9, 21, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Lecture hall block",
                            FloorID = 2
                        },
                        new
                        {
                            BlockID = 3,
                            BlockName = "Block B",
                            CreatedAt = new DateTime(2025, 9, 21, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Classroom block",
                            FloorID = 2
                        },
                        new
                        {
                            BlockID = 4,
                            BlockName = "Block A",
                            CreatedAt = new DateTime(2025, 9, 21, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Computer labs",
                            FloorID = 3
                        });
                });

            modelBuilder.Entity("Backend_Resourcely.Models.Booking", b =>
                {
                    b.Property<int>("BookingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("BookingID"));

                    b.Property<int?>("ApprovedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ApprovedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndsAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("LocationID")
                        .HasColumnType("int");

                    b.Property<string>("Purpose")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime>("StartsAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("BookingID");

                    b.HasIndex("ApprovedBy");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LocationID");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("Backend_Resourcely.Models.Building", b =>
                {
                    b.Property<int>("BuildingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("BuildingID"));

                    b.Property<string>("BuildingName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.HasKey("BuildingID");

                    b.HasIndex("BuildingName")
                        .IsUnique();

                    b.ToTable("Buildings");

                    b.HasData(
                        new
                        {
                            BuildingID = 1,
                            BuildingName = "Main Building",
                            CreatedAt = new DateTime(2025, 9, 21, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Primary academic building"
                        },
                        new
                        {
                            BuildingID = 2,
                            BuildingName = "Engineering Block",
                            CreatedAt = new DateTime(2025, 9, 21, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Engineering and technology departments"
                        });
                });

            modelBuilder.Entity("Backend_Resourcely.Models.Floor", b =>
                {
                    b.Property<int>("FloorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("FloorID"));

                    b.Property<int>("BuildingID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("FloorName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("FloorNumber")
                        .HasColumnType("int");

                    b.HasKey("FloorID");

                    b.HasIndex("BuildingID", "FloorNumber")
                        .IsUnique();

                    b.ToTable("Floors");

                    b.HasData(
                        new
                        {
                            FloorID = 1,
                            BuildingID = 1,
                            CreatedAt = new DateTime(2025, 9, 21, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Main entrance and reception",
                            FloorName = "Ground Floor",
                            FloorNumber = 0
                        },
                        new
                        {
                            FloorID = 2,
                            BuildingID = 1,
                            CreatedAt = new DateTime(2025, 9, 21, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Lecture halls and classrooms",
                            FloorName = "First Floor",
                            FloorNumber = 1
                        },
                        new
                        {
                            FloorID = 3,
                            BuildingID = 2,
                            CreatedAt = new DateTime(2025, 9, 21, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Engineering labs",
                            FloorName = "Ground Floor",
                            FloorNumber = 0
                        });
                });

            modelBuilder.Entity("Backend_Resourcely.Models.Location", b =>
                {
                    b.Property<int>("LocationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("LocationID"));

                    b.Property<int>("BlockID")
                        .HasColumnType("int");

                    b.Property<int?>("Capacity")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("LocationName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("LocationType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("LocationID");

                    b.HasIndex("BlockID", "LocationName")
                        .IsUnique();

                    b.ToTable("Locations");

                    b.HasData(
                        new
                        {
                            LocationID = 1,
                            BlockID = 2,
                            Capacity = 100,
                            CreatedAt = new DateTime(2025, 9, 21, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Large lecture hall with projector",
                            LocationName = "A101",
                            LocationType = "lectureHalls"
                        },
                        new
                        {
                            LocationID = 2,
                            BlockID = 2,
                            Capacity = 80,
                            CreatedAt = new DateTime(2025, 9, 21, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Medium lecture hall",
                            LocationName = "A102",
                            LocationType = "lectureHalls"
                        },
                        new
                        {
                            LocationID = 3,
                            BlockID = 3,
                            Capacity = 30,
                            CreatedAt = new DateTime(2025, 9, 21, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Computer lab",
                            LocationName = "B201",
                            LocationType = "Labs"
                        },
                        new
                        {
                            LocationID = 4,
                            BlockID = 3,
                            Capacity = 15,
                            CreatedAt = new DateTime(2025, 9, 21, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Small meeting room",
                            LocationName = "B202",
                            LocationType = "meetingRooms"
                        },
                        new
                        {
                            LocationID = 5,
                            BlockID = 4,
                            Capacity = 25,
                            CreatedAt = new DateTime(2025, 9, 21, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Engineering lab",
                            LocationName = "E101",
                            LocationType = "Labs"
                        });
                });

            modelBuilder.Entity("Backend_Resourcely.Models.ResourceAvailability", b =>
                {
                    b.Property<int>("AvailabilityID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("AvailabilityID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<string>("DayOfWeek")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<TimeOnly>("EndTime")
                        .HasColumnType("time(6)");

                    b.Property<bool>("IsRecurring")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("LocationID")
                        .HasColumnType("int");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("time(6)");

                    b.HasKey("AvailabilityID");

                    b.HasIndex("LocationID");

                    b.ToTable("ResourceAvailabilities");
                });

            modelBuilder.Entity("Backend_Resourcely.Models.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("UserID"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("RoleType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("UserID");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserID = 1,
                            Email = "admin@university.edu",
                            FirstName = "Admin",
                            LastName = "User",
                            RoleType = "admin"
                        },
                        new
                        {
                            UserID = 2,
                            Email = "john.lecturer@university.edu",
                            FirstName = "John",
                            LastName = "Lecturer",
                            RoleType = "lecturer"
                        },
                        new
                        {
                            UserID = 3,
                            Email = "jane.student@university.edu",
                            FirstName = "Jane",
                            LastName = "Student",
                            RoleType = "student"
                        });
                });

            modelBuilder.Entity("Backend_Resourcely.Models.Block", b =>
                {
                    b.HasOne("Backend_Resourcely.Models.Floor", "Floor")
                        .WithMany("Blocks")
                        .HasForeignKey("FloorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Floor");
                });

            modelBuilder.Entity("Backend_Resourcely.Models.Booking", b =>
                {
                    b.HasOne("Backend_Resourcely.Models.User", "Approver")
                        .WithMany("BookingsApproved")
                        .HasForeignKey("ApprovedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Backend_Resourcely.Models.User", "Creator")
                        .WithMany("BookingsCreated")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Backend_Resourcely.Models.Location", "Location")
                        .WithMany("Bookings")
                        .HasForeignKey("LocationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Approver");

                    b.Navigation("Creator");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("Backend_Resourcely.Models.Floor", b =>
                {
                    b.HasOne("Backend_Resourcely.Models.Building", "Building")
                        .WithMany("Floors")
                        .HasForeignKey("BuildingID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Building");
                });

            modelBuilder.Entity("Backend_Resourcely.Models.Location", b =>
                {
                    b.HasOne("Backend_Resourcely.Models.Block", "Block")
                        .WithMany("Locations")
                        .HasForeignKey("BlockID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Block");
                });

            modelBuilder.Entity("Backend_Resourcely.Models.ResourceAvailability", b =>
                {
                    b.HasOne("Backend_Resourcely.Models.Location", "Location")
                        .WithMany("ResourceAvailabilities")
                        .HasForeignKey("LocationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("Backend_Resourcely.Models.Block", b =>
                {
                    b.Navigation("Locations");
                });

            modelBuilder.Entity("Backend_Resourcely.Models.Building", b =>
                {
                    b.Navigation("Floors");
                });

            modelBuilder.Entity("Backend_Resourcely.Models.Floor", b =>
                {
                    b.Navigation("Blocks");
                });

            modelBuilder.Entity("Backend_Resourcely.Models.Location", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("ResourceAvailabilities");
                });

            modelBuilder.Entity("Backend_Resourcely.Models.User", b =>
                {
                    b.Navigation("BookingsApproved");

                    b.Navigation("BookingsCreated");
                });
#pragma warning restore 612, 618
        }
    }
}
